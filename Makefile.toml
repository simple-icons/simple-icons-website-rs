[env]
# Clipboard API of wasm_bindgen needs unstable API
# https://docs.rs/web-sys/latest/web_sys/struct.Navigator.html#method.clipboard
RUSTFLAGS = "--cfg=web_sys_unstable_apis"

[tasks.default]
alias = "dev"

[tasks.dev]
description = "Run the app and watch CSS on development"
run_task = { name = ["run-pre-build-scripts", "serve-and-watch-css"] }
workspace = false

[tasks.serve-and-watch-css]
description = "Run the app and watch CSS on development"
run_task = { name = ["serve-for-dev", "watch-css"], parallel = true }
workspace = false

[tasks.serve-for-dev]
description = "Serve the app on development"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = [
    "serve",
    "--watch",
    ".",
    "--watch",
    "../components",
    "--watch",
    "../macros",
    "--watch",
    "../simple-icons",
    "--watch",
    "../i18n",
    "--watch",
    "../config",
    "--ignore",
    "assets/dist",
    "--ignore",
    "../i18n/locales",
]
workspace = false
cwd = "./app"

[tasks.docs]
description = "Open components documentation"
command = "cargo"
args = ["doc", "--open", "--no-deps"]
workspace = false

[tasks.formats]
description = "Format files"
run_task = { name = ["format-rust", "format-prettier"], parallel = false }
workspace = false

[tasks.lint]
description = "Check format of files and run linters"
run_task = { name = [
    "lint-prettier",
    "lint-js",
    "lint-rust",
    "lint-css"
], parallel = false }
workspace = false

[tasks.tests]
description = "Run tests"
command = "npx"
args = ["playwright", "test", "--trace", "on", "${@}"]
workspace = false
cwd = "./end2end"

[tasks.watch-css]
description = "Build CSS with Tailwind on development"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "stylesheet.css",
    "--output",
    "assets/dist/stylesheet.css",
    "--watch",
    "--no-minify",
]
workspace = false
cwd = "."

[tasks.builds]
description = "Build the app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
run_task = { name = ["run-pre-build-scripts", "build-css", "build-wasm"] }
workspace = false

[tasks.build-wasm]
description = "Build the WASM app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = ["--config", "Trunk.prod.toml", "build", "--release"]
cwd = "./app"
workspace = false

[tasks.build-css]
description = "Build CSS with TailwindCSS for production"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "./stylesheet.css",
    "--output",
    "./assets/dist/stylesheet.css",
]
cwd = "./app"
workspace = false

[tasks.serve-for-prod]
description = "Serve the app with anywhere"
command = "npx"
args = ["anywhere", "-d", "dist"]
cwd = "./app"
workspace = false

[tasks.serve]
description = "Build for production and serve"
run_task = { name = ["builds", "serve-for-prod"] }
workspace = false

[tasks.format-rust-code]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
workspace = false
command = "cargo"
args = ["fmt", "--all"]

[tasks.clippy]
description = "Run clippy"
install_crate = "clippy"
workspace = false
command = "cargo"
args = ["clippy", "--", "-D", "warnings"]

[tasks.lint-rust-code]
description = "Lint Rust code"
run_task = { name = ["clippy", "rustfmt-check"], parallel = false }
workspace = false

[tasks.rustfmt-check]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
workspace = false
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.format-leptos-code]
description = "Format leptos view! macros"
install_crate = "leptosfmt"
workspace = false
command = "leptosfmt"
args = ["*/src/**/*.rs"]

[tasks.format-rust]
description = "Format Rust code and leptos view! macros"
run_task = { name = [
    "format-rust-code",
    "format-leptos-code"
], parallel = false }
workspace = false

[tasks.lint-rust]
description = "Lint Rust code and leptos view! macros"
run_task = { name = [
    "lint-rust-code",
    # TODO (pending): https://github.com/bram209/leptosfmt/issues/12

], parallel = false }
workspace = false

[tasks.lint-css]
description = "Lint CSS with stylelint"
command = "npx"
args = [
    "stylelint",
    "{components,app}/**/*.css",
    "--ignore-path",
    ".gitignore",
    "--config",
    "app/.stylelintrc.json"
]
workspace = false

[tasks.format-prettier]
description = "Format non Rust files in the project with prettier"
command = "npx"
args = ["prettier", "--write", ".", "--ignore-path", ".gitignore"]
workspace = false

[tasks.lint-prettier]
description = "Check formatting of non Rust files in the project with prettier"
command = "npx"
args = ["prettier", "--check", ".", "--ignore-path", ".gitignore"]
workspace = false

[tasks.lint-js]
description = "Lint JS and TS files in the project with ESLint"
command = "npx"
args = ["eslint", ".", "--ignore-path", ".gitignore"]
workspace = false

[tasks.fetch-deprecated-icons]
description = "Fetch deprecated icons from simple-icons repository"
command = "npm"
args = ["run", "fetch-deprecated-icons"]
workspace = false

[tasks.build-fast-fuzzy]
description = "Build the fast-fuzzy JS library for the web"
command = "npx"
args = [
    "esbuild",
    "components/src/controls/search/fast-fuzzy.js",
    "--bundle",
    "--outfile=app/assets/dist/fast-fuzzy.js",
    "--minify",
]
workspace = false

[tasks.create-sitemap]
description = "Create sitemap.xml asset"
command = "npm"
args = ["run", "create-sitemap"]
workspace = false

[tasks.create-cname]
description = "Create CNAME"
command = "npm"
args = ["run", "create-cname"]
workspace = false

[tasks.run-pre-build-scripts]
description = "Run pre-build scripts"
run_task = { name = [
    "build-fast-fuzzy",
    "fetch-deprecated-icons",
    "create-sitemap",
    "create-cname",
], parallel = true }
workspace = false
