[env]
# Clipboard API of wasm_bindgen needs unstable API
# https://docs.rs/web-sys/latest/web_sys/struct.Navigator.html#method.clipboard
RUSTFLAGS = "--cfg=web_sys_unstable_apis"

[config]
init_task = "init"
default_to_workspace = false

[tasks.init]
description = "Initialization task run before all others"
run_task = { name = ["fnm_use", "npm_install", "setup_js_libraries_filenames"] }

[tasks.fnm_use]
description = "Run 'fnm use'"
condition.env_not_set = ["CI"]
install_crate = { crate_name = "fnm", binary = "fnm", test_arg = "--help" }
command = "fnm"
args = ["use", "--install-if-missing", "--silent-if-unchanged"]

[tasks.setup_js_libraries_filenames]
description = "Setup JS libraries filenames to be able to import cleanly with Trunk"
script_runner = "node"
script_extension = "js"
script = '''
const fs = require('fs');
fs.copyFileSync(
    'node_modules/blob-stream/.js',
    'node_modules/blob-stream/blob-stream.js',
)
'''

[tasks.npm_install]
description = "Run 'npm install'"
condition_script = ["which npm"]
condition.files_modified = { input = ["./package.json"], output = [
    "./package-lock.json"
] }
condition.env_not_set = ["CI"]
command = "npm"
args = ["install"]

[tasks.default]
alias = "dev"

[tasks.dev]
description = "Run the app and watch CSS on development"
run_task = { name = ["run-pre-build-scripts", "serve-and-watch-css"] }

[tasks.serve-and-watch-css]
description = "Run the app and watch CSS on development"
run_task = { name = ["serve-for-dev", "watch-css"], parallel = true }

[tasks.serve-for-dev]
description = "Serve the app on development"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = [
    "serve",
    "--watch",
    ".",
    "--watch",
    "../components",
    "--watch",
    "../macros",
    "--watch",
    "../simple-icons",
    "--watch",
    "../i18n",
    "--watch",
    "../config",
    "--ignore",
    "./public/assets/dist",
    "--ignore",
    "../i18n/locales",
]
cwd = "./app"

[tasks.doc]
clear = true
description = "Open components documentation"
command = "cargo"
args = ["doc", "--open", "--no-deps"]

[tasks.format]
clear = true
description = "Format files"
run_task = { name = ["format-rust", "format-prettier"] }

[tasks.lint]
description = "Check format of files and run linters"
run_task = { name = ["lint-prettier", "lint-js", "lint-rust", "lint-css"] }

[tasks.test]
clear = true
description = "Run tests"
command = "npx"
args = ["playwright", "test", "--trace", "on", "${@}"]
cwd = "./end2end"

[tasks.watch-css]
description = "Build CSS with Tailwind on development"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "./stylesheet.css",
    "--output",
    "./public/assets/dist/stylesheet.css",
    "--watch",
    "--no-minify",
]
cwd = "."

[tasks.build]
clear = true
description = "Build the app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
run_task = { name = ["run-pre-build-scripts", "build-css", "build-wasm"] }

[tasks.build-wasm]
description = "Build the WASM app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = ["--config", "Trunk.prod.toml", "build", "--release"]
cwd = "./app"

[tasks.build-css]
description = "Build CSS with TailwindCSS for production"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "./stylesheet.css",
    "--output",
    "./public/assets/dist/stylesheet.css",
]
cwd = "./app"

[tasks.serve-for-prod]
description = "Serve the app with anywhere"
command = "npx"
args = ["anywhere", "-d", "dist"]
cwd = "./app"

[tasks.serve]
description = "Build for production and serve"
run_task = { name = ["build", "serve-for-prod"] }

[tasks.format-rust-code]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.clippy]
description = "Run clippy"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--", "-D", "warnings"]

[tasks.lint-rust]
description = "Lint Rust code"
run_task = { name = ["clippy", "rustfmt-check", "leptosfmt-check"] }

[tasks.rustfmt-check]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.leptosfmt-check]
description = "Check Leptos code format with leptosfmt"
install_crate = "leptosfmt"
command = "leptosfmt"
args = ["--check", "--quiet", "*/src/**/*.rs"]

[tasks.format-leptos-code]
description = "Format leptos view! macros"
install_crate = "leptosfmt"
command = "leptosfmt"
args = ["--quiet", "*/src/**/*.rs"]

[tasks.format-rust]
description = "Format Rust code and leptos view! macros"
run_task = { name = ["format-rust-code", "format-leptos-code"] }

[tasks.lint-css]
description = "Lint CSS with stylelint"
command = "npx"
args = [
    "stylelint",
    "{components,app}/**/*.css",
    "--ignore-path",
    ".gitignore",
    "--config",
    "./app/.stylelintrc.json"
]

[tasks.format-prettier]
description = "Format non Rust files in the project with prettier"
command = "npx"
args = [
    "prettier",
    "--write",
    ".",
    "--ignore-path",
    ".gitignore",
    "--log-level",
    "warn"
]

[tasks.lint-prettier]
description = "Check formatting of non Rust files in the project with prettier"
command = "npx"
args = ["prettier", "--check", ".", "--ignore-path", ".gitignore"]

[tasks.lint-js]
description = "Lint JS and TS files in the project with ESLint"
command = "npx"
args = ["eslint", ".", "--ignore-path", ".gitignore"]

[tasks.fetch-deprecated-icons]
description = "Fetch deprecated icons from simple-icons repository"
command = "npx"
args = ["tsx", "scripts/fetch-deprecated-icons.ts"]

[tasks.build-fast-fuzzy]
description = "Build the fast-fuzzy JS library for the web"
command = "npx"
args = [
    "esbuild",
    "./components/src/controls/search/fast-fuzzy.js",
    "--bundle",
    "--outfile=./app/public/assets/dist/fast-fuzzy.js",
    "--minify",
]

[tasks.build-svg-path-bbox]
description = "Build the svg-path-bbox JS library for the web"
command = "npx"
args = [
    "esbuild",
    "./components/src/js_libs/svg-path-bbox.js",
    "--bundle",
    "--outfile=./app/public/assets/dist/svg-path-bbox.js",
    "--minify",
]

[tasks.create-sitemap]
description = "Create sitemap.xml asset"
command = "npx"
args = ["tsx", "scripts/create-sitemap.ts"]

[tasks.create-cname]
description = "Create CNAME"
command = "npx"
args = ["tsx", "scripts/create-cname.ts"]

[tasks.run-pre-build-scripts]
description = "Run pre-build scripts"
run_task = { name = [
    "build-fast-fuzzy",
    "build-svg-path-bbox",
    "fetch-deprecated-icons",
    "create-sitemap",
    "create-cname",
], parallel = true }
